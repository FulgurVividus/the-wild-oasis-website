# 1. Defining Routes and Pages

In NexJS in order to define a route, we need to create folder/file in the "app" folder, and by convention to name it "page.js".

Each Page in NextJS is simply a React component that we export from a "page.js" file which needs to be in some folder.

rootURL/cabins/cabin - the "cabin" is a page in the "cabins". 
So the nested folder structure is: app/cabins/cabin/(page.js)

# 2. Navigation between pages

<Link href=""></Link>
Is like <Link> in React Router but instead of 'to' we have 'href'.

So behind the scenes, what this does is to apply a few optimization techniques. 
-> So first of all, it will actually prefetch all the routes that are linked on a certain page, even though that only works in production. So we cannot see that happening here in development. 
-> What also happens is that each page is downloaded separately as a separate chunk, which will also improve performance again. 
-> And finally, each page that we visit in the browser will actually be cached right in the browser as well. So it will be stored there temporarily. And then as we move around, all these pages will not have to be refetched again.

# 3. Creating a Layout

The RootLayout (in layout.js) will wrap the entire application, so it will apply to every single route in the app. Therefore, it needs to contain the "html" and "body" tag.

# 4. Fetching data in a Page

All the logs in NextJS will appear in the terminal.

# 5. Adding Interactivity with Client Components

No matter what the component is, would it be client or server, all the components are initially rendered on the server.

# 6. Displaying a Loader Indicator

loading.js - is a global loader cause this one will actually apply to any page in the app, no matter how deeply the routes are nested.

With the loading file we can display an instant loading state that will be immediately rendered on the server while the content of route loads.

# 7. Adding a Page Metadata

In the (app => layout.js) file, the "title => template" has %s. So this %s will get replaced with whatever title we export from individual pages.

# 8. Adding a favicon

Just import the image file to the "app" folder and it will be automatically used as a favicon. Name it "icon.format".

# 9. Loading Fonts

3 steps (app folder => layout.js):
-> import the name of fonts from Google Fonts
-> configure 
-> import className in the className of html tag where you wanna apply the font

# 10. Optimizing Images with NextJS <Image /> component

It does 3 things:
-> it'll automatically serve the correctly sized images in modern formats (it'll do it if necessary)
-> prevents the layout shifts (it forces us to specify the exact height and width)
-> it'll automatically lazy load the images

NOTE: if we import the image file into the component, then we don't have to specify the height and width. On these kinda staticly imported images, we can specify some other optional attributes like "quality" and "priority". (example: app/_components/Logo.js)

In the (app folder => Page.js) file, we can use "fill" property to make image fill the entire space. The "placeholder" property on the image works only if image is staticly imported.

# 11. Adding a Nested Layout

If we wanna add a Nested Layout to just one part of the site (below one URL segment), we need to create a layout.js file right inside that folder. (example: app/account/layout.js)

This layout.js will be then applied to the page.js (app/account/page.js) that is inside "account" folder. And then just as always all the nested pages inside

# 12. Async and await in server components

They can be directly used not only in the pages, but also in any server components.

Moving data-fetching to its own component, in NextJS it's a good practice to do. We should get used to always have the data-fetching as close as possible to the place that actually needs that data. Because by doing so, we can implement more granular data-fetching strategies. (example: app/cabins/page.js)

# 12. Dynamic Route Segments

In a folder, we can create a folder with the name of the segment that we wanna use dynamically in the URL. And then we can create a page inside that folder. The name of this folder must be in brackets => [folder_name] (example: app/cabins/[cabinId]/page.js)

To get data from this dynamic segment, the way this works is that any page or even layout that is associated with a dynamic route segment gets access to the "params" prop. (example: app/cabins/[cabinId]/page.js)

# 13. Error Boundary

In NextJS, we can use the "ErrorBoundary" component to catch any errors that might occur in the application. Then convention is to name this file "error.js" in the app folder.

ErrorBoundary must be always client component. (example: app/error.js)

It accepts the error object itself and the function that we can call to reset the ErrorBoundary.

NOTE: only rendering errors will be caught by ErrorBoundary and if some errors occur in the root layout.js it also cannot be caught. If we wanna catch any errors even in the root layout.js, then we need to create a file called "global-error.js".

As with other files like layout.js or loading.js, we can also have multiple ErrorBoundaries even deeper in the application structure.
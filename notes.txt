# 1. Defining Routes and Pages

In NexJS in order to define a route, we need to create folder/file in the "app" folder, and by convention to name it "page.js".

Each Page in NextJS is simply a React component that we export from a "page.js" file which needs to be in some folder.

rootURL/cabins/cabin - the "cabin" is a page in the "cabins". 
So the nested folder structure is: app folder -> cabins folder (page.js) -> cabin folder (page.js)

# 2. Navigation between pages

<Link href=""></Link>
Is like <Link> in React Router but instead of 'to' we have 'href'.

So behind the scenes, what this does is to apply a few optimization techniques. 
-> So first of all, it will actually prefetch all the routes that are linked on a certain page, even though that only works in production. So we cannot see that happening here in development. 
-> What also happens is that each page is downloaded separately as a separate chunk, which will also improve performance again. 
-> And finally, each page that we visit in the browser will actually be cached right in the browser as well. So it will be stored there temporarily. And then as we move around, all these pages will not have to be refetched again.

# 3. Creating a Layout

The RootLayout (in layout.js) will wrap the entire application, so it will apply to every single route in the app. Therefore, it needs to contain the "html" and "body" tag.

# 4. Fetching data in a Page

All the logs in NextJS will appear in the terminal.

# 5. Adding Interactivity with Client Components

No matter what the component is, would it be client or server, all the components are initially rendered on the server.

# 6. Displaying a Loader Indicator

loading.js - is a global loader cause this one will actually apply to any page in the app, no matter how deeply the routes are nested.

With the loading file we can display an instant loading state that will be immediately rendered on the server while the content of route loads.

# 7. Adding a Page Metadata

In the (app => layout.js) file, the "title => template" has %s. So this %s will get replaced with whatever title we export from individual pages.

# 8. Adding a favicon

Just import the image file to the "app" folder and it will be automatically used as a favicon. Name it "icon.format".

# 9. Loading Fonts

3 steps (app folder => layout.js):
-> import the name of fonts from Google Fonts
-> configure 
-> import className in the className of html tag where you wanna apply the font